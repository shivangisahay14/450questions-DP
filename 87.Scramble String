//Memoization + Pruning
class Solution {
    unordered_map<string,bool> mem;
    bool solve(string s1,string s2)
    {
        if(s1.size()==1)
            return s1==s2;
        if(s1==s2)
            return true;
        string key=s1+s2;
        if(mem.find(key)!=mem.end())
            return mem[key];
        
        //Pruning: Avoid Unnecessary recursion calls
        int n=s1.size();
        vector<int> f1(26),f2(26);
        for(int i=0;i<n;++i)
        {
            f1[s1[i]-'a']+=1;
            f2[s2[i]-'a']+=1;
        }
        if(f1!=f2)
            return mem[key]=false;
        
        bool res = false;
        for(int i=1;i<n;++i)
        {
            if((solve(s1.substr(0,i),s2.substr(0,i)) and solve(s1.substr(i),s2.substr(i)))
               or(solve(s1.substr(0,i),s2.substr(n-i)) and solve(s1.substr(i),s2.substr(0,n-i))))
                return mem[key]=true;
        }
        return mem[key]=false;
    }
public:
    bool isScramble(string s1, string s2) {
        int n = s1.size();
        return solve(s1,s2);
    }
};

//Memoization
class Solution {
    unordered_map<string,bool> mem;
    bool solve(string s1,string s2)
    {
        if(s1.size()==1)
            return s1==s2;
        if(s1==s2)
            return true;
        string key=s1+s2;
        if(mem.find(key)!=mem.end())
            return mem[key];
        
        int n=s1.size();
        bool res = false;
        for(int i=1;i<n;++i)
        {
            if((solve(s1.substr(0,i),s2.substr(0,i)) and solve(s1.substr(i),s2.substr(i)))
               or(solve(s1.substr(0,i),s2.substr(n-i)) and solve(s1.substr(i),s2.substr(0,n-i))))
                return mem[key]=true;
        }
        return mem[key]=false;
    }
public:
    bool isScramble(string s1, string s2) {
        int n = s1.size();
        return solve(s1,s2);
    }
};


//Recursion only
class Solution {
    bool solve(string s1,string s2)
    {
        if(s1.size()==1)
            return s1==s2;
        if(s1==s2)
            return true;
        
        int n=s1.size();
        bool res = false;
        for(int i=1;i<n;++i)
        {
            if((solve(s1.substr(0,i),s2.substr(0,i)) and solve(s1.substr(i),s2.substr(i)))
               or(solve(s1.substr(0,i),s2.substr(n-i)) and solve(s1.substr(i),s2.substr(0,n-i))))
                return true;
        }
        return false;
    }
public:
    bool isScramble(string s1, string s2) {
        int n = s1.size();
        return solve(s1,s2);
    }
};

3D DP:
 int n = s1.size();
		// dp[i][j][k] = Whether the strings a[i, ..., i+k-1] and b[j, ..., j+k-1] 
		// are scrambled version of each other
        bool dp[n][n][n+1];
        memset(dp, 0, sizeof(dp));
        
		// Base case: comparing all substrings of size 1 
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) 
                dp[i][j][1] = s1[i] == s2[j];
        }
        
        for(int k = 2; k <= n; k++) {
            for(int i = 0; i <= (n-k); i++) {
                for(int j = 0; j <= (n-k); j++) {
                    
					// Split the strings A = a[i, ... , i + k-1], B = b[j, ..., j + k-1]
					// into length r and (k-r) length. (say A1, A2 and B1, B2)
					
					// For A and B to be scrambled versions of each other, 
					// either A1 = scrambled(B1) and A2 = scrambled(B2) or
					// A1 = scrambled(B2) and A2 = scrambled(B1)
                    for(int r = 1; r < k; r++) {
                        dp[i][j][k] |= (dp[i][j][r] && dp[i+r][j+r][k-r]) || 
                                       (dp[i][j+k-r][r] && dp[i+r][j][k-r]);
                    }
                    
                }
            }    
        }
        
        return dp[0][0][n];
        

