	int minimumCost(int cost[], int N, int W) 
	{ 
	     vector<int> val, wt;
 
    // traverse the original cost[] array and skip
    // unavailable packets and make val[] and wt[]
    // array. size variable tells the available number
    // of distinct weighted packets
    int size = 0;
    for (int i=0; i<N; i++)
    {
        if (cost[i]!= -1)
        {
            val.push_back(cost[i]);
            wt.push_back(i+1);
            size++;
        }
    }
 
    N = size;
    
    long dp[N+1][W+1];
 
    // fill 0th row with infinity
    for (int i=0; i<=W; i++)
       { dp[0][i] = INT_MAX; }
 
    // fill 0'th column with 0
    for (int i=1; i<=N; i++)
       { dp[i][0] = 0;}
 
    // now check for each weight one by one and fill the
    // matrix according to the condition
    for (int i=1; i<=N; i++)
    {
        for (int j=1; j<=W; j++)
        {
            // wt[i-1]>j means capacity of bag is
            // less then weight of item
            if (wt[i-1] > j)
               { dp[i][j] = dp[i-1][j];}
 
            // here we check we get minimum cost either
            // by including it or excluding it
            else
               { dp[i][j] = min(dp[i-1][j],
                     dp[i][j-wt[i-1]] + val[i-1]);}
        }
    }
 
    // exactly weight W can not be made by given weights
    return (dp[N][W]==INT_MAX)? -1: dp[N][W];

	    
	    
        // Your code goes here
	} 
