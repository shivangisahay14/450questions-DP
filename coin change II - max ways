unbounded knapsack with count no of subsets with given sum 

1D array
  vector<int>dp(amount+1);
    dp[0]=1;
    for(int i=0;i<coins.size();i++){
        for(int j=coins[i];j<=amount;j++){
                 dp[j]+=dp[j-coins[i]];
        }
       
2D array
int change(int amount, vector<int>& coins) {
        
        vector<vector<int>> dp(coins.size()+1,vector<int>(amount+1));
        
        for(int i=0;i<=coins.size();i++)
        {
            dp[i][0]=1;
        }
        
        for(int j=1;j<=amount;j++)
        {
            dp[0][j]=0;    
        }
        
        for(int i=1;i<=coins.size();i++)
        {
            for(int j=1;j<=amount;j++)
            {
                if(j>=coins[i-1])
                {
                    dp[i][j]=dp[i-1][j] + dp[i][j-coins[i-1]];
                }
                else
                {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[coins.size()][amount];
        
    }
