Catalan numbers satisfy the following recursive formula. 
Time Complexity: Time complexity of above implementation is O(n2)
 
#include <iostream> 
using namespace std; 

// A dynamic programming based function to find nth 
// Catalan number 
unsigned long int catalanDP(unsigned int n) 
{ 
	// Table to store results of subproblems 
	unsigned long int catalan[n + 1]; 

	// Initialize first two values in table 
	catalan[0] = catalan[1] = 1; 

	// Fill entries in catalan[] using recursive formula 
	for (int i = 2; i <= n; i++) 
	{ 
		catalan[i] = 0; 
		for (int j = 0; j < i; j++) 
			catalan[i] += catalan[j] 
					* catalan[i - j - 1]; 
	} 

	// Return last entry 
	return catalan[n]; 
} 


Time Complexity: O(n)
Auxiliary Space: O(1)

Pseudocode: 

a) initially set cat_=1 and print it
b) run a for loop i=1 to i<=n
            cat_ *= (4*i-2)
            cat_ /= (i+1)
            print cat_
c) end loop and exit        


// Function to print the number 
void catalan(int n) 
{ 
    cpp_int cat_ = 1; 
  
    // For the first number 
    cout << cat_ << " "; // C(0) 
  
    // Iterate till N 
    for (cpp_int i = 1; i < n; i++)  
    { 
        // Calculate the number 
        // and print it 
        cat_ *= (4 * i - 2); 
        cat_ /= (i + 1); 
        cout << cat_ << " "; 
    } 
} 
  
The 7 questions in this series were:

Catalan Numbers: https://youtu.be/eUw9A1wsFg8​
Number of BSTS: https://youtu.be/H1qjjkm3P3c​
Count Valleys and Mountains: https://youtu.be/hM_FJnrP1kk​
Count Valid Brackets: https://youtu.be/n-8R95-5MXw​
Circle and Chords: https://youtu.be/qgQg1BcCWBA​
Polygon Triangulation: https://youtu.be/jSGW3YKkyHQ​
Min Score of Polygon Triangulation: https://youtu.be/tmIhmeL8WRo
 
