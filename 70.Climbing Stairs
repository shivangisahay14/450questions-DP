 int climbStairs(int n) {
        
         if(n==1 || n==0)
            return 1;
        vector<int>dp(n+1);
        dp[0]=1;
        dp[1]=1;
        
        for(long long int i=2;i<=n;i++){
            
            dp[i]=dp[i-1]+dp[i-2];
        }
        
        return dp[n];
        
        
    }
    
    If problem is given with atmost k steps,
    
    then 
    
    1.
    for(int i=1;i<=n;i++){
    
    dp[i]=0;
    for(int j=i;j<=k;j++){
        if(i-j)>=0
            dp[i]=dp[i]+dp[i-j];
            
      }
      }
      return dp[n];
      
      
      2.optimised solution-sliding window approach
      
      int dp[n+1];
      dp[0]=dp[1]=0;
      for(int i=2;i<=k;i++){
            dp[i]=2*dp[i-1];
      }
      for(int i=k+1;i<=n;i++){
            dp[i]=2*dp[i-1]+dp[i-k-1];
            
       }
       return dp[n];
        
