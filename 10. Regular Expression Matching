Recursion:

 bool isMatch(string s, string p) {
        if (p.empty()) {
            return s.empty();
        }
        
        bool first_match = (!s.empty()) && (p[0] == s[0] || p[0] == '.');
        
        if (p.size() > 1 && p[1] == '*') {
            return isMatch(s, p.substr(2, p.size() - 2)) || (first_match && isMatch(s.substr(1, s.size() - 1), p));
        }
        else {
            return first_match && isMatch(s.substr(1, s.size() - 1), p.substr(1, p.size() - 1));
        }
    }
    
    
    Bottom up DP:
     bool isMatch(string s, string p) {
        
        int n=p.size();
        int m=s.size();
        
        vector<vector<bool>>dp(n+1,vector<bool>(m+1));
        
        dp[0][0] = true;
        
        for(int j=1;j<=m;j++){
            dp[0][j]=false;
        }
        
        for(int i=1;i<=n;i++){
            
            if(p[i-1]=='*')
                dp[i][0]=dp[i-2][0];
            else
                dp[i][0]=false;
        }
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                
                if(p[i-1]=='.' or p[i-1]==s[j-1])
                { dp[i][j]=dp[i-1][j-1];}
                
                
                else if(p[i-1]=='*'){
                    
                
                    if(p[i-2]=='.' or p[i-2]==s[j-1]){
                        
                        dp[i][j]=dp[i-2][j] or dp[i][j-1];
                    }
                    else{
                        dp[i][j]=dp[i-2][j];                        
                    }
                }
                
            }
        }
        
        return dp[n][m];
