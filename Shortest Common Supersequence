 To print the SCS string:
 
 
 string shortestCommonSupersequence(string str1, string str2) {
        
         int len1 = str1.size();
        int len2 = str2.size();
        string dp[len1+1][len2+1];
        
        for(int i=0;i<=len1;++i)
            for(int j=0;j<=len2;++j)
            {
                if(i==0 || j==0)
                    dp[i][j] = "";
                else if(str1[i-1]==str2[j-1])
                    dp[i][j] = dp[i-1][j-1]+str1[i-1];
                else
                    dp[i][j] = dp[i][j-1].size() > dp[i-1][j].size() ? dp[i][j-1]:dp[i-1][j];
            }
        string lcs= dp[len1][len2];
        
        string ans = "";
        
        int p1=0,p2=0;
        for(char c: lcs)
        {
            while(str1[p1]!=c)  //Add all non-LCS chars from str1
                ans += str1[p1++];
            while(str2[p2]!=c)  //Add all non-LCS chars from str2
                ans += str2[p2++];
            
            ans += c;   //Add LCS-char and increment both ptrs
            ++p1;
            ++p2;
        }
        ans += str1.substr(p1) + str2.substr(p2);
        return ans;
        
    }
    
    
    To print the length of SCS:
    Recursion:
    int superSeq(char* X, char* Y, int m, int n)
{
    if (!m)
        return n;
    if (!n)
        return m;
 
    if (X[m - 1] == Y[n - 1])
        return 1 + superSeq(X, Y, m - 1, n - 1);
 
    return 1
           + min(superSeq(X, Y, m - 1, n),
                 superSeq(X, Y, m, n - 1));
}

Botttom-up table:
int superSeq(char* X, char* Y, int m, int n)
{
    int dp[m + 1][n + 1];
 
    // Fill table in bottom up manner
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            // Below steps follow above recurrence
            if (!i)
                dp[i][j] = j;
            else if (!j)
                dp[i][j] = i;
            else if (X[i - 1] == Y[j - 1])
                dp[i][j] = 1 + dp[i - 1][j - 1];
            else
                dp[i][j]
                    = 1 + min(dp[i - 1][j], dp[i][j - 1]);
        }
    }
 
    return dp[m][n];
}
