int eggDrop(int n, int k)
{
    // If there are no floors,
    // then no trials needed.
    // OR if there is one floor,
    // one trial needed.
    if (k == 1 || k == 0)
        return k;
 
    // We need k trials for one
    // egg and k floors
    if (n == 1)
        return k;
 
    int min = INT_MAX, x, res;
 
    // Consider all droppings from
    // 1st floor to kth floor and
    // return the minimum of these
    // values plus 1.
    for (x = 1; x <= k; x++) {
        res = max(
            eggDrop(n - 1, x - 1),
            eggDrop(n, k - x));
        if (res < min)
            min = res;
    }
 
    return min + 1;
}


DP using tabulation:
int eggDrop(int n, int k)
{
    /* A 2D table where entery
    eggFloor[i][j] will represent
    minimum number of trials needed for
    i eggs and j floors. */
    int eggFloor[n + 1][k + 1];
    int res;
    int i, j, x;
 
    // We need one trial for one floor and 0
    // trials for 0 floors
    for (i = 1; i <= n; i++) {
        eggFloor[i][1] = 1;
        eggFloor[i][0] = 0;
    }
 
    // We always need j trials for one egg
    // and j floors.
    for (j = 1; j <= k; j++)
        eggFloor[1][j] = j;
 
    // Fill rest of the entries in table using
    // optimal substructure property
    for (i = 2; i <= n; i++) {
        for (j = 2; j <= k; j++) {
            eggFloor[i][j] = INT_MAX;
            for (x = 1; x <= j; x++) {
                res = 1 + max(
                              eggFloor[i - 1][x - 1],
                              eggFloor[i][j - x]);
                if (res < eggFloor[i][j])
                    eggFloor[i][j] = res;
            }
        }
    }
 
    // eggFloor[n][k] holds the result
    return eggFloor[n][k];
}
 DP using binary search:
  vector<vector<int>> dp(k+1,vector<int>(n+1));
        if(n==0 || n==1){
            return n;
        }
        if(k==0){
            return 0;
        }
        for(int row=1;row<=k;row++){
            for(int col=1;col<=n;col++){
                if(row==1){
                    dp[row][col]=col;
                }
                else if(col==1){
                    dp[row][col]=1;
                }
                else{
                    int minHeight=INT_MAX;
                    int start=1;
                    int end=col;
                    
                    while(start<=end){
                        int mid= start+(end-start)/2;
                        int br=dp[row-1][mid-1];
                        int save=dp[row][col-mid];
                        minHeight=min(minHeight,max(br,save)+1); 
                        if(br==save){
                            break;
                        }
                        else if(br<save){
                            start=mid+1;
                        }
                        else{
                            end=mid-1;
                        }
                        
                    }
                    dp[row][col]=minHeight;
                }
            }
        }
        return dp[k][n];
        
//recursive + memoization
    int rec_mem(int k,int n,vector<vector<int>> &dp)
    {
        if(n==0)
            return 0;
        if(k==1)
            return n;
        if(dp[k][n]!=-1)
            return dp[k][n];
        int ans = n;
        for(int i=1;i<=n;i++)
        {
            int left = rec_mem(k-1,i-1,dp);
            int right = rec_mem(k,n-i,dp);
            int temp = 1+max(left,right);
            ans = min(temp,ans);
        }
        return dp[k][n] = ans;
    }
    
    // DP
    int fun(int K,int N)
    {
        if(N==0||N==1) 
            return N;
        if(K==1)
            return N;
        vector<vector<int>> dp(K+1,vector<int> (N+1,0));
        for(int i=0;i<=K;i++)
        {
            dp[i][0]=0;
            dp[i][1]=1;
        }
        for(int i=0;i<=N;i++)
        {
            dp[0][i]=0;
            dp[1][i]=i;
        }
        for(int i=2;i<K+1;i++)
        {
            for(int j=2;j<N+1;j++)
            {    
                int ans = N;
                for(int m=1;m<=j;m++)
                {
                    int left = dp[i-1][m-1]; 
                    int right = dp[i][j-m];  
                    int temp = 1+max(left,right); 
                    ans=min(ans,temp);                           
                }
                dp[i][j]=ans;
            }
        }
        return dp[K][N];
    }
