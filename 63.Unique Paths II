 int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        int dp[m][n];
        memset(dp,0,sizeof(dp));
       //base case
        if(obstacleGrid[0][0]==1||obstacleGrid[m-1][n-1]==1){
            return 0;
        }
        //if there is obstacle in first row then all the cells after this   in that row will have 0 value;
        for(int i=0;i<n;i++){
            if(obstacleGrid[0][i]==1){
                break;
            }
        
        else{
            dp[0][i]=1;
        }
        }
        // //if there is obstacle in first coloumnthen all the cells after  this in that coloumn will have 0 value;
       for(int i=0;i<m;i++){
            if(obstacleGrid[i][0]==1){
                break;
            }
        
        else{
            dp[i][0]=1;
        }
       }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
             //checking for obstacle
                if(obstacleGrid[i][j-1]!=1){
                    dp[i][j]+=dp[i][j-1];
                }
              //checking for obstacle
                if(obstacleGrid[i-1][j]!=1){
                    dp[i][j]+=dp[i-1][j];
                }
            }
        }
        return dp[m-1][n-1];
    }
