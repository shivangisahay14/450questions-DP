Unbounded knapsack

int coinChange(vector<int>& coins, int amount) {
        
        int n=coins.size();
        
        vector<vector<long long int>>dp(n+1,vector<long long int>(amount+1));
        
        for(int i=1;i<=n;i++){
            dp[i][0]=0;
        }
        
        for(int j=0;j<=amount;j++){
            dp[0][j]=INT_MAX;//INT_MAX-1
        }
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=amount;j++){
                

                 if(coins[i-1]<=j)
                    dp[i][j]=min(1+dp[i][j-coins[i-1]],dp[i-1][j]);
                
                else
                    dp[i][j]=dp[i-1][j];
                
                
            }
        }
        
        if(dp[n][amount]==INT_MAX)
            return -1;
        
        else
            return dp[n][amount];
            
1D array
  int dp[amount+1];
		dp[0]=0;
		for(int i=1;i<=amount;++i)
			dp[i] = INT_MAX;
		
		int len = coins.size();

		for (int i = 1; i <= amount; ++i)
		{
			for (int j = 0; j < len; ++j)
			{
				if(coins[j] <= i){
					int rest = dp[i-coins[j]];
					if(rest != INT_MAX && rest+1<dp[i]){
						dp[i] = rest+1;
					}
				}
			}
		}
		return dp[amount]==INT_MAX ? -1 : dp[amount];
            
 Recursive solution (TLE) T(n) = 2^n
This solution is completly based upon recusion so it will give TLE.

class Solution {
public:
    int solve(vector<int>coin,int size,int amount)
{
	if(amount == 0)
		return 0;
	if(amount<0)
		return INT_MAX;
	if(size==0)
		return INT_MAX/2;
	if(coin[size-1]<=amount)
		return min(1+solve(coin,size,amount-coin[size-1]),solve(coin,size-1,amount));
	else
		return solve(coin,size-1,amount);
	return INT_MAX;
}
    int coinChange(vector<int>& coins, int amount) {
    return solve(coins,coins.size(),amount);

  }
};
    }
